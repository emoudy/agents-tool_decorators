name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  MOCK_LLM_CALLS: true
  ANTHROPIC_API_KEY: test_key_for_mocked_tests

jobs:
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run quality checks
      run: |
        echo "üîç Running code quality checks..."
        python quality_check.py
        if [ $? -ne 0 ]; then
          echo "‚ùå Quality checks failed! Build rejected."
          exit 1
        fi
        echo "‚úÖ Quality checks passed"

    - name: Run all tests
      run: |
        echo "üß™ Running full test suite..."
        python -m unittest discover tests/ -v
        if [ $? -ne 0 ]; then
          echo "‚ùå Tests failed! Build rejected."
          exit 1
        fi
        echo "‚úÖ All tests passed"

  test:
    name: Multi-Python Test Suite
    runs-on: ubuntu-latest
    needs: quality-gate  # Only run if quality gate passes
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with Black
      run: |
        black --check src/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only src/ tests/

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Run unittest as backup
      run: |
        python -m unittest discover tests/ -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-gate  # Only run if quality gate passes

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities
      run: |
        safety check -r requirements.txt

    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json

  package-test:
    name: Package Installation Test
    runs-on: ubuntu-latest
    needs: quality-gate  # Only run if quality gate passes

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Test package installation
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Test that the package can be imported
        python -c "from src import main, models, tools, config; print('‚úÖ All imports successful')"

    - name: Test CLI functionality
      run: |
        # Test that the main entry point works (should run briefly then exit)
        timeout 10s python main.py || echo "‚úÖ CLI runs successfully"
